plugins {
    id 'java-library'
    id 'com.gradleup.shadow' version '8.3.2'
    id("io.github.revxrsal.zapper") version "1.0.3"
}

group = 'me.mapacheee'
version = '1.0.0'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = uri("https://repo.papermc.io/repository/maven-public/")
    }
    maven {
        url = uri("https://repo.extendedclip.com/releases/")
    }
    maven {
        url = uri("https://maven.enginehub.org/repo/")
    }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
    maven { url = 'https://hub.spigotmc.org/nexus/content/groups/public/' }
    maven { url = 'https://jitpack.io' }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.10-R0.1-SNAPSHOT")

    api("com.thewinterframework:wintercore:1.0.0")

    compileOnly("com.sk89q.worldguard:worldguard-bukkit:7.0.14")
    compileOnly("me.clip:placeholderapi:2.11.6")

    zap("com.zaxxer:HikariCP:5.1.0")
    zap("org.xerial:sqlite-jdbc:3.46.0.0")
    zap("com.mysql:mysql-connector-j:8.4.0")

    implementation("io.github.revxrsal:zapper.api:1.0.3")
    implementation("net.kyori:adventure-text-serializer-legacy:4.17.0")
}

zapper {
    libsFolder = "libraries"
    relocationPrefix = "me.mapacheee.hitendcrystal.libs"
    relocate("com.zaxxer.hikari", "hikari")
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('paper-plugin.yml') {
        expand props
    }
}

shadowJar {
    archiveClassifier.set('')

    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/LICENSE*'
    exclude 'META-INF/NOTICE*'
    exclude 'META-INF/maven/**'
    relocate 'com.thewinterframework', 'me.mapacheee.hitendcrystal.libs.winter'
}

build {
    dependsOn shadowJar
}
